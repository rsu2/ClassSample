header,
section,
footer {
    width: 1200px;
    margin: 3em auto;
}
/* -----------------Floats------------------ */
.row > .column {
    width: 380px;
    margin-right: 30px;
    float: left;
}

.row > .column:last-child {
    margin-right: 0;
}

/*Inline Block */
/* Inline block elements have the same properties as inline, but will allow width and height values */
/* Will recognize spacing in the html and show it in the browser */
.inline > .column {
    width: 380px;
    margin-right: 30px;
    display: inline-block;
    vertical-align: top;
}
.inline > .column:last-child {
    margin-right: 0;
}

/* -------------------Cloumn  Count -------------*/
/* Given the number of columns, the browser will evenly distribute the content in exactly that number of columns */
.column-count{
    -webkit-column-count: 3;
    -moz-column-count: 3;
    column-count: 3;

    -webkit-column-gap: 30px;
    -moz-count-gap: 30px;
    column-gap: 30px;
}
/* make sure your parapgrahs are separated*/
p{
    margin-top: 0;
    margin-bottom: 24px;
} 


/*--------------flexbox------------*/
/* Define a flex container */
/* The direct children inside a flex container,become the flex items */
/* By default, the flex items will try to fit onto one row */
.flex-container{
    display: flex;
    justify-content: space-between;
}
/*use justify-content to layout the spacing for the gutters (margins)*/
.flex-container > .column {
    width: 380px;
   
}
.flex-container > .column:last-child {
    margin-right: 0;
}

/* -------------Grid----------*/
.grid-container{
    display: grid;
    grid-template-columns: 380px 380px 380px;
    grid-gap: 30px;
}